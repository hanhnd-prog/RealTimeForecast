import streamlit as st
import pandas as pd
import sqlite3
import joblib
import plotly.graph_objects as go
from datetime import datetime, timedelta
from model_utils import *

# --- C·∫§U H√åNH TRANG ---
st.set_page_config(
    page_title="D·ª± b√°o D√≤ng ch·∫£y",
    page_icon="üåä",
    layout="wide"
)

# --- K·∫æT N·ªêI CSDL (Cache ƒë·ªÉ tƒÉng t·ªëc) ---
@st.cache_resource
def get_db_connection():
    conn = sqlite3.connect('data/streamflow.db',check_same_thread=False)
    return conn

# # --- T·∫¢I M√î H√åNH (Cache ƒë·ªÉ kh√¥ng ph·∫£i t·∫£i l·∫°i) ---
# @st.cache_resource
# def load_models(station_id):
#     # ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ thay ƒë·ªïi t√πy theo c√°ch b·∫°n l∆∞u t√™n file
#     lgbm_model = joblib.load(f'models/lgbm_station_{station_id}.pkl')
#     rf_model = joblib.load(f'models/rf_station_{station_id}.pkl')
#     lstm_model = load_model(f'models/lstm_station_{station_id}.h5')
#     return {'LGBM': lgbm_model, 'RF': rf_model, 'LSTM': lstm_model}

# --- GIAO DI·ªÜN CH√çNH ---
st.title("üåä D·ª± b√°o d√≤ng ch·∫£y th∆∞·ª£ng l∆∞u s√¥ng ƒê√†")
st.markdown("Ph·∫ßn m·ªÅm n√†y l√† s·∫£n ph·∫©m c·ªßa ƒë·ªÅ t√†i ƒêTƒêL.CN.06.23")


# --- SIDEBAR: L·ª∞A CH·ªåN C·ª¶A NG∆Ø·ªúI D√ôNG ---
conn = get_db_connection()
stations_df = pd.read_sql("SELECT station_id, station_name FROM Stations", conn)
station_dict = pd.Series(stations_df.station_id.values, index=stations_df.station_name).to_dict()

st.sidebar.header("T√πy ch·ªçn v·ªã tr√≠ d·ª± b√°o")
selected_station_name = st.sidebar.selectbox("Ch·ªçn tr·∫°m quan tr·∫Øc:", options=list(station_dict.keys()))
selected_station_id = station_dict[selected_station_name]

# --- T·∫¢I D·ªÆ LI·ªÜU V√Ä M√î H√åNH T∆Ø∆†NG ·ª®NG ---
df_hist = get_station_data(conn, selected_station_id)
# models = load_models(selected_station_id)


st.header(f"V·ªã tr√≠ d·ª± b√°o: {selected_station_name}")
# st.header(f"M√£ tr·∫°m: {selected_station_id}")
# st.dataframe(df_hist.head())

# --- HI·ªÇN TH·ªä D·ªÆ LI·ªÜU L·ªäCH S·ª¨ ---
st.subheader("D·ªØ li·ªáu d√≤ng ch·∫£y quan tr·∫Øc")
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=df_hist.index,
    #x=df_hist['record_date'], 
    y=df_hist['flow_value'], 
    mode='lines',
    line=dict(color = 'skyblue'),
    name='D√≤ng ch·∫£y th·ª±c ƒëo'))
fig.update_layout(title={'text':'Bi·ªÉu ƒë·ªì d√≤ng ch·∫£y theo th·ªùi gian','x':0.5,'xanchor':'center'}, xaxis_title='Th·ªùi gian', yaxis_title='L∆∞u l∆∞·ª£ng (m¬≥/s)')
st.plotly_chart(fig, use_container_width=True)

st.sidebar.subheader("Ph√¢n t√≠ch qu√° kh·ª©:")
today = datetime.today()
date_range = st.sidebar.date_input(
    "Ch·ªçn kho·∫£ng th·ªùi gian xem x√©t:",
    value = (today - timedelta(days=10),today),
    max_value=today
)
start_date,end_date = date_range
# st.header(str(start_date)+','+str(end_date))
start_date = str(start_date)
end_date = str(end_date)
# 3. Ch·ªçn lead time d·ª± b√°o
# st.sidebar.subheader("T√πy ch·ªçn d·ª± b√°o")
# Gi·∫£ s·ª≠ b·∫°n d·ª± b√°o tr∆∞·ªõc t·ª´ 1 ƒë·∫øn 10 ng√†y
selected_lead_time = st.sidebar.selectbox(
    "Ch·ªçn th·ªùi gian d·ª± ki·∫øn (s·ªë b∆∞·ªõc):",
    options=list(range(1, 11)), # Thay ƒë·ªïi range n√†y n·∫øu b·∫°n c√≥ th·ªùi gian d·ª± ki·∫øn kh√°c
    index=0 # M·∫∑c ƒë·ªãnh l√† d·ª± b√°o 1 ng√†y
)

# --- T·∫¢I D·ªÆ LI·ªÜU D·ª∞A TR√äN L·ª∞A CH·ªåN ---
df_actual = get_actual_data(conn, selected_station_id, str(start_date), str(end_date))
df_pred = get_prediction_data(conn, selected_station_id, start_date, end_date, selected_lead_time)
# st.subheader(f"df_pred t·ª´ ng√†y: {start_date} t·ªõi ng√†y {end_date}")
# st.dataframe(df_pred.head())
# st.subheader(f"df_actual t·ª´ ng√†y: {start_date} t·ªõi ng√†y: {end_date}")
# st.dataframe(df_actual.head())

# G·ªôp d·ªØ li·ªáu th·ª±c ƒëo v√† d·ª± b√°o v√†o c√πng m·ªôt DataFrame ƒë·ªÉ so s√°nh
df_comparison = df_actual.join(df_pred, how='left')
df_comparison.rename(columns={'flow_value': 'Th·ª±c ƒëo'}, inplace=True)

# --- HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---
st.subheader(f"So s√°nh k·∫øt qu·∫£ d·ª± b√°o trong qu√° kh·ª© cho tr·∫°m: {selected_station_name}")
st.info(f"ƒêang hi·ªÉn th·ªã so s√°nh cho c√°c d·ª± b√°o trong qu√° kh·ª© c√≥ th·ªùi gian d·ª± ki·∫øn **{selected_lead_time} ng√†y**.")
# st.dataframe(df_comparison.head())
# 1. BI·ªÇU ƒê·ªí SO S√ÅNH
fig = go.Figure()

# V·∫Ω ƒë∆∞·ªùng th·ª±c ƒëo
fig.add_trace(go.Scatter(
    x=df_comparison.index,
    y=df_comparison['Th·ª±c ƒëo'],
    mode='lines',
    name='Th·ª±c ƒëo',
    line=dict(color='royalblue', width=3)
))

# V·∫Ω c√°c ƒë∆∞·ªùng d·ª± b√°o (n·∫øu c√≥ d·ªØ li·ªáu)
if not df_pred.empty:
    model_colors = {'LGBM': 'orange', 'RF': 'green', 'LSTM': 'firebrick'}
    for model_name in df_pred.columns:
        fig.add_trace(go.Scatter(
            x=df_comparison.index,
            y=df_comparison[model_name],
            mode='lines+markers',
            name=f'D·ª± b√°o {model_name}',
            line=dict(color=model_colors.get(model_name, 'gray'), dash='dash'),
            marker=dict(size=8)
        ))

fig.update_layout(
    title=f'Bi·ªÉu ƒë·ªì so s√°nh D√≤ng ch·∫£y Th·ª±c ƒëo v√† D·ª± b√°o trong qu√° kh·ª© (Th·ªùi gian d·ª± ki·∫øn: {selected_lead_time} ng√†y)',
    xaxis_title='Ng√†y',
    yaxis_title='L∆∞u l∆∞·ª£ng (m¬≥/s)',
    legend_title="Ch√∫ gi·∫£i"
)
st.plotly_chart(fig, use_container_width=True)

# 2. B·∫¢NG ƒê√ÅNH GI√Å D·ª∞ B√ÅO TRONG QU√Å KH·ª®
st.subheader(f"ƒê√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh (Th·ªùi gian d·ª± ki·∫øn: {selected_lead_time} ng√†y)")
#st.markdown(f"T√≠nh to√°n sai s·ªë trong kho·∫£ng th·ªùi gian t·ª´ **{start_date.strftime('%d/%m/%Y')}** ƒë·∫øn **{end_date.strftime('%d/%m/%Y')}**.")
st.markdown(f"ƒê√°nh gi√° hi·ªáu su·∫•t c√°c m√¥ h√¨nh trong kho·∫£ng th·ªùi gian t·ª´ **{start_date}** ƒë·∫øn **{end_date}**.")

# B·ªè c√°c h√†ng kh√¥ng c√≥ c·∫£ gi√° tr·ªã th·ª±c ƒëo v√† d·ª± b√°o ƒë·ªÉ ƒë√°nh gi√°
df_eval = df_comparison.dropna()

if not df_eval.empty:
    metrics = {}
    # Ch·ªâ t√≠nh to√°n cho c√°c c·ªôt m√¥ h√¨nh c√≥ trong df_eval
    model_columns = [col for col in df_pred.columns if col in df_eval.columns]
    
    for model_name in model_columns:
        # T√≠nh to√°n RMSE (Root Mean Squared Error)
        rmse = ((df_eval[model_name] - df_eval['Th·ª±c ƒëo']) ** 2).mean() ** 0.5
        # T√≠nh to√°n MAE (Mean Absolute Error)
        mae = (df_eval[model_name] - df_eval['Th·ª±c ƒëo']).abs().mean()
        metrics[model_name] = {'RMSE': f"{rmse:.2f}", 'MAE': f"{mae:.2f}"}

    st.dataframe(pd.DataFrame(metrics).T.rename_axis('M√¥ h√¨nh'), use_container_width=True)
else:
    st.warning("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë√°nh gi√° trong kho·∫£ng th·ªùi gian v√† th·ªùi gian d·ª± ki·∫øn ƒë√£ ch·ªçn.")

# --- TH·ª∞C HI·ªÜN D·ª∞ B√ÅO "REAL-TIME" ---
st.sidebar.subheader("T√πy ch·ªçn m√¥ h√¨nh d·ª± b√°o th·ªùi gian th·ª±c:")
option_LGBM = st.sidebar.checkbox("LGBM")
option_RF   = st.sidebar.checkbox("RF")
option_LSTM = st.sidebar.checkbox("LSTM")

st.header(f"K·∫øt qu·∫£ d·ª± b√°o th·ªùi gian th·ª±c cho tr·∫°m: {selected_station_name}")

# L·∫•y d·ªØ li·ªáu d·ª± b√°o cho hi·ªán t·∫°i t·ª´ b·∫£ng FlowPredictions
df_realtime_pred = get_realtime_prediction_data(conn,selected_station_id)

st.subheader("B·∫£ng k·∫øt qu·∫£ d·ª± b√°o th·ªùi gian th·ª±c:")
st.dataframe(df_realtime_pred)

st.subheader("ƒê·ªì th·ªã k·∫øt qu·∫£ d·ª± b√°o th·ªùi gian th·ª±c:")
# L·∫•y d·ªØ li·ªáu quan tr·∫Øc trong 10 ng√†y g·∫ßn nh·∫•t
ngay_cuoi_quantrac = datetime.today() - timedelta(days=1)
ngay_cuoi_quantrac = ngay_cuoi_quantrac.strftime('%Y-%m-%d')
# st.header(ngay_cuoi_quantrac)
ngay_dau_quantrac = datetime.today() - timedelta(days=11)
ngay_dau_quantrac = ngay_dau_quantrac.strftime('%Y-%m-%d')

df_obs = get_actual_data(conn, selected_station_id, ngay_dau_quantrac, ngay_cuoi_quantrac)
# st.dataframe(df_obs)

# Chuan bi du lieu de ve phan du lieu du bao
#add_row = pd.DataFrame({'LGBM':[df_obs['flow_value'][-1]]},index=pd.to_datetime(ngay_cuoi_quantrac))
add_row = pd.DataFrame({'LGBM':[df_obs['flow_value'][-1]]},index=[ngay_cuoi_quantrac])
df_add_row_to_realtime_pred = pd.concat([add_row,df_realtime_pred])
# st.dataframe(df_add_row_to_realtime_pred) 

# Ve hinh ket qua du bao
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=df_obs.index,
    y=df_obs['flow_value'],
    mode='lines',
    name='Quan tr·∫Øc g·∫ßn ƒë√¢y',
    line=dict(color='skyblue')
))
fig.add_trace(go.Scatter(
    x=df_add_row_to_realtime_pred.index,
    y=df_add_row_to_realtime_pred['LGBM'],
    mode='lines+markers',
    name='D·ª± b√°o b·∫±ng m√¥ h√¨nh LGBM',
    line=dict(dash='dash',color='darkorange'),
    marker=dict(symbol='diamond',size=8)
))

st.plotly_chart(fig)


